{"version":3,"file":"transition.js","sources":["uni_modules/uview-plus/components/u-transition/transition.js"],"sourcesContent":["// 定义一个一定时间后自动成功的promise，让调用nextTick方法处，进入下一个then方法\nconst nextTick = () => new Promise(resolve => setTimeout(resolve, 1000 / 50))\n// nvue动画模块实现细节抽离在外部文件\n// #ifdef APP-NVUE\nimport animationMap from './nvue-ani-map.js'\n// #endif\n\n// #ifndef APP-NVUE\n// 定义类名，通过给元素动态切换类名，赋予元素一定的css动画样式\nconst getClassNames = (name) => ({\n    enter: `u-${name}-enter u-${name}-enter-active`,\n    'enter-to': `u-${name}-enter-to u-${name}-enter-active`,\n    leave: `u-${name}-leave u-${name}-leave-active`,\n    'leave-to': `u-${name}-leave-to u-${name}-leave-active`\n})\n// #endif\n\n// #ifdef APP-NVUE\n// 引入nvue(weex)的animation动画模块，文档见：\n// https://weex.apache.org/zh/docs/modules/animation.html#transition\nconst animation = uni.requireNativePlugin('animation')\nconst getStyle = (name) => animationMap[name]\n// #endif\n\nexport default {\n    methods: {\n        // 组件被点击发出事件\n        clickHandler() {\n            this.$emit('click')\n        },\n        // #ifndef APP-NVUE\n        // vue版本的组件进场处理\n         vueEnter() {\n            // 动画进入时的类名\n            const classNames = getClassNames(this.mode)\n            // 定义状态和发出动画进入前事件\n            this.status = 'enter'\n            this.$emit('beforeEnter')\n            this.inited = true\n            this.display = true\n            this.classes = classNames.enter\n            this.$nextTick(async () => {\n\t\t\t\t// #ifdef H5\n\t\t\t\tawait uni.$u.sleep(20)\n\t\t\t\t// #endif\n                // 标识动画尚未结束\n                this.$emit('enter')\n                this.transitionEnded = false\n\t\t\t\t// 组件动画进入后触发的事件\n                this.$emit('afterEnter')\n                // 赋予组件enter-to类名\n                this.classes = classNames['enter-to']\n            })\n        },\n        // 动画离场处理\n        vueLeave() {\n            // 如果不是展示状态，无需执行逻辑\n            if (!this.display) return\n            const classNames = getClassNames(this.mode)\n            // 标记离开状态和发出事件\n            this.status = 'leave'\n            this.$emit('beforeLeave')\n            // 获得类名\n            this.classes = classNames.leave\n\n            this.$nextTick(() => {\n               // 动画正在离场的状态\n               this.transitionEnded = false\n               this.$emit('leave')\n                // 组件执行动画，到了执行的执行时间后，执行一些额外处理\n                setTimeout(this.onTransitionEnd, this.duration)\n                this.classes = classNames['leave-to']\n            })\n        },\n        // #endif\n        // #ifdef APP-NVUE\n        // nvue版本动画进场\n        nvueEnter() {\n            // 获得样式的名称\n            const currentStyle = getStyle(this.mode)\n            // 组件动画状态和发出事件\n            this.status = 'enter'\n            this.$emit('beforeEnter')\n            // 展示生成组件元素\n            this.inited = true\n            this.display = true\n            // 在nvue安卓上，由于渲染速度慢，在弹窗，键盘，日历等组件中，渲染其中的内容需要时间\n            // 导致出现弹窗卡顿，这里让其一开始为透明状态，等一定时间渲染完成后，再让其隐藏起来，再让其按正常逻辑出现\n            this.viewStyle = {\n                opacity: 0\n            }\n            // 等待弹窗内容渲染完成\n            this.$nextTick(() => {\n                // 合并样式\n                this.viewStyle = currentStyle.enter\n                Promise.resolve()\n                    .then(nextTick)\n                    .then(() => {\n                        // 组件开始进入前的事件\n                        this.$emit('enter')\n                        // nvue的transition动画模块需要通过ref调用组件，注意此处的ref不同于vue的this.$refs['u-transition']用法\n                        animation.transition(this.$refs['u-transition'].ref, {\n                            styles: currentStyle['enter-to'],\n                            duration: this.duration,\n                            timingFunction: this.timingFunction,\n                            needLayout: false,\n                            delay: 0\n                        }, () => {\n                            // 动画执行完毕，发出事件\n                            this.$emit('afterEnter')\n                        })\n                    })\n                    .catch(() => {})\n            })\n        },\n        nvueLeave() {\n            if (!this.display) {\n                return\n            }\n            const currentStyle = getStyle(this.mode)\n            // 定义状态和事件\n            this.status = 'leave'\n            this.$emit('beforeLeave')\n            // 合并样式\n            this.viewStyle = currentStyle.leave\n            // 放到promise中处理执行过程\n            Promise.resolve()\n                .then(nextTick) // 等待几十ms\n                .then(() => {\n                    this.transitionEnded = false\n                    // 动画正在离场的状态\n                    this.$emit('leave')\n                    animation.transition(this.$refs['u-transition'].ref, {\n                        styles: currentStyle['leave-to'],\n                        duration: this.duration,\n                        timingFunction: this.timingFunction,\n                        needLayout: false,\n                        delay: 0\n                    }, () => {\n                        this.onTransitionEnd()\n                    })\n                })\n                .catch(() => {})\n        },\n        // #endif\n        // 完成过渡后触发\n        onTransitionEnd() {\n            // 如果已经是结束的状态，无需再处理\n            if (this.transitionEnded) return\n            this.transitionEnded = true\n            // 发出组件动画执行后的事件\n            this.$emit(this.status === 'leave' ? 'afterLeave' : 'afterEnter')\n            if (!this.show && this.display) {\n                this.display = false\n                this.inited = false\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";AASA,MAAM,gBAAgB,CAAC,UAAU;AAAA,EAC7B,OAAO,KAAK,IAAI,YAAY,IAAI;AAAA,EAChC,YAAY,KAAK,IAAI,eAAe,IAAI;AAAA,EACxC,OAAO,KAAK,IAAI,YAAY,IAAI;AAAA,EAChC,YAAY,KAAK,IAAI,eAAe,IAAI;AAC5C;AAUA,MAAe,aAAA;AAAA,EACX,SAAS;AAAA;AAAA,IAEL,eAAe;AACX,WAAK,MAAM,OAAO;AAAA,IACrB;AAAA;AAAA,IAGA,WAAW;AAER,YAAM,aAAa,cAAc,KAAK,IAAI;AAE1C,WAAK,SAAS;AACd,WAAK,MAAM,aAAa;AACxB,WAAK,SAAS;AACd,WAAK,UAAU;AACf,WAAK,UAAU,WAAW;AAC1B,WAAK,UAAU,YAAY;AAKvB,aAAK,MAAM,OAAO;AAClB,aAAK,kBAAkB;AAEvB,aAAK,MAAM,YAAY;AAEvB,aAAK,UAAU,WAAW,UAAU;AAAA,MACpD,CAAa;AAAA,IACJ;AAAA;AAAA,IAED,WAAW;AAEP,UAAI,CAAC,KAAK;AAAS;AACnB,YAAM,aAAa,cAAc,KAAK,IAAI;AAE1C,WAAK,SAAS;AACd,WAAK,MAAM,aAAa;AAExB,WAAK,UAAU,WAAW;AAE1B,WAAK,UAAU,MAAM;AAElB,aAAK,kBAAkB;AACvB,aAAK,MAAM,OAAO;AAEjB,mBAAW,KAAK,iBAAiB,KAAK,QAAQ;AAC9C,aAAK,UAAU,WAAW,UAAU;AAAA,MACpD,CAAa;AAAA,IACJ;AAAA;AAAA,IAyED,kBAAkB;AAEd,UAAI,KAAK;AAAiB;AAC1B,WAAK,kBAAkB;AAEvB,WAAK,MAAM,KAAK,WAAW,UAAU,eAAe,YAAY;AAChE,UAAI,CAAC,KAAK,QAAQ,KAAK,SAAS;AAC5B,aAAK,UAAU;AACf,aAAK,SAAS;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACL;;"}